scalar Date

input Filters{
  key:String
  value:String
}

type Query{
  feeds(first:Int! cursor:String! distance:Float! filters:[Filters] interests:[ID]):FeedsPayload
}

type FeedsPayload {
    error: Error
    feeds: [Feed]
}

type Feed{
  _id:ID
  name:String
  interests:[Interest]
  location: Location
  ref_user:UserFeed
  ignored:Boolean
  match:Boolean
  gender:String
  city:String
  country:String
}


type UserFeed {
  _id:ID!
  email: String!
  username: String!
  name: String!
  photoUrl: String
  dob: Date!
  address:String
}




type Location{ 
  coordinates:[Float]
}

type User {
  _id:ID!
  email: String!
  username: String!
  name: String!
  photoUrl: String
  phone: Phone
  dob: Date!
  facebookId: String
  city:String
  country:String
  googleId: String
  appleId: String
  location: Location
  provider: String,
  password: String
  accessToken:String
  gender:Gender
  completed:Boolean
  step:Int
}


type Query{
  me:AddUserPayload
}

enum Gender {
  MALE
  FEMALE
  NONE
}

type Phone{
  _id:ID!
  primary:Boolean
  phone:String!
}

type Mutation {
  addUser(input: InputUser!): AddUserPayload
}

input InputLocation {
  location:ILocation
  country:String
  city:String
}

type GenericPayload {
    error: Error
    success: Boolean
}


type Mutation {
  setLocation(input: InputLocation!): GenericPayload
}

type Error{
  message:String,
  code:String,
}


type OtpPayloadResponse {
    error: Error
    otpResponse: Response
}

type Response{
  message:String
  code:String
  name:String
  email:String
}

type OtpResponse{
  accessToken:String!
}

type Mutation {
  requestOtp(email:String!): OtpPayloadResponse
}

type OtpVerificationPayload {
    error: Error
    otpResponse: OtpResponse
}

type Mutation {
  verifyOtp(email:String! otp:String!): OtpVerificationPayload
}

type AddUserPayload {
    error: Error
    user: User
}

type Mutation {
  updateUser(id: String, input: InputUser!): AddUserPayload
}

input InputResetPassword{
  password:String
  confirm_password:String
}



type Mutation {
  resetPassword(input:InputResetPassword!): AddUserPayload
}

input InputUser {
  email: String
  name: String
  provider: String
  photoUrl: String
  username: String
  phone:String
  dob:Date!
  location:ILocation
  password: String
  gender:String
}

input ILocation{ 
  type:String
  coordinates:[Float]
}


type Comment {
  comment: String
  createdAt: String
  modifiedAt: String
  user: User
}

type Blog {
  title: String
  description: String
  body: String
  keywords: String
  comments: [Comment]
  category: String
  url: String
  adsRequired: Boolean
  createdAt: String
  modifiedAt: String
  images: [String]
}

type Query {
  blogs: [Blog]
}

type Query {
  blog(url: String!): Blog
}


type Mutation {
  addBlog(input: InputBlog!): Blog
}

type Mutation {
  updateBlog(id: String, input: InputBlog!): Blog
}

type Mutation {
  deleteBlog(id: String): Blog
}

type Mutation {
  addComment(blogUrl: String!, commentDescription: String!): Blog
}

type Mutation {
  updateComment(id: String, input: InputComment!): Comment
}

type Mutation {
  deleteComment(id: String): Comment
}

type Mutation {
  signIn(email: String! password:String!): AddUserPayload
}

type Query{
  phone(id:ID!):Phone
}


type Interest{
  _id:ID!
  title:String
  addedBy:ID!
}

type InterestsPayload{
  interests:[Interest]
  error:Error
}

type Query{
  interests:InterestsPayload
}


input InputInterests {
  interests:[String]
}

type Mutation {
  updateInterests(interests:[String]): GenericPayload
}

input InputBlog {
  title: String
  description: String
  body: String
  keywords: String
  category: String
  url: String
  adsRequired: Boolean
  createdAt: String
  modifiedAt: String
  images: [String]
}

input InputComment {
  comment: String
  createdAt: String
  modifiedAt: String
  user: InputUser
}





type Status{
  name:String
  imageUrl:String
}

input InputStatus{
  name:String
  imageUrl:String
}

type Mutation {
  addStatus(status:InputStatus): GenericPayload
}

type StatusesPayload{
  statuses:[Status]
  error:Error
}

type Query{
  statuses:StatusesPayload
}