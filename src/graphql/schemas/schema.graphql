scalar Date

input Filters {
  key: String
  value: String
}

type Query {
  feeds(
    first: Int!
    cursor: String!
    distance: Float!
    filters: [Filters]
    interests: [ID]
  ): FeedsPayload
}

type FeedsPayload {
  error: Error
  feeds: [Feed]
}

type Feed {
  _id: ID
  name: String
  interests: [Interest]
  location: Location
  ref_user: UserFeed
  ignored: Boolean
  match: Boolean
  gender: String
  state: State
  country: Country
}

type UserFeed {
  _id: ID!
  email: String!
  username: String!
  name: String!
  photoUrl: String
  dob: Date!
  address: String
}

type FeedPayload {
  error: Error
  feed: Feed
}

type Query {
  feed(userId: String!, refId: String!): FeedPayload
}

type Location {
  coordinates: [Float]
}

type Country{
  _id:ID!
  name:String
  phone_code:String
  short_name:String
  enable:Boolean
}


type UserPhotos{
  imageUrl:String
  primary: Boolean
}

type User {
  _id: ID!
  email: String!
  username: String!
  name: String!
  photoUrl: String
  phone: Phone
  dob: Date!
  facebookId: String
  state: State
  country: Country
  googleId: String
  appleId: String
  location: Location
  provider: String
  password: String
  accessToken: String
  gender: Gender
  completed: Boolean
  step: Int
  buildingId: String
  photos:[UserPhotos]
  interests:[Interest]
}

type Query {
  me: AddUserPayload
  getUser(userId:String!):AddUserPayload
}

enum Gender {
  MALE
  FEMALE
  NONE
}

type Phone {
  _id: ID!
  primary: Boolean
  phone: String!
}

type Mutation {
  addUser(input: InputUser!): AddUserPayload
}

input InputLocation {
  location: ILocation!
}

type GenericPayload {
  error: Error
  success: Boolean
  resource_id: String
}

type Mutation {
  setLocation(input: InputLocation!): GenericPayload
}

type Error {
  message: String
  code: String
}

type OtpPayloadResponse {
  error: Error
  otpResponse: Response
}

type Response {
  message: String
  code: String
  name: String
  email: String
}

type OtpResponse {
  accessToken: String!
}

type Mutation {
  requestOtp(email: String!): OtpPayloadResponse
}

type OtpVerificationPayload {
  error: Error
  otpResponse: OtpResponse
}

type Mutation {
  verifyOtp(email: String!, otp: String!): OtpVerificationPayload
}

type AddUserPayload {
  error: Error
  user: User
}

type Mutation {
  updateUser(id: String, input: InputUser!): AddUserPayload
}

input InputResetPassword {
  password: String
  confirm_password: String
}

type Mutation {
  resetPassword(input: InputResetPassword!): AddUserPayload
}

input InputUser {
  email: String!
  name: String!
  provider: String!
  photoUrl: String
  username: String!
  phone: String!
  state: String!
  dob: Date!
  location: ILocation
  password: String!
  gender: String!
}

input ILocation {
  type: String
  coordinates: [Float]
}

type Comment {
  comment: String
  createdAt: String
  modifiedAt: String
  user: User
}

type Blog {
  title: String
  description: String
  body: String
  keywords: String
  comments: [Comment]
  category: String
  url: String
  adsRequired: Boolean
  createdAt: String
  modifiedAt: String
  images: [String]
}

type Query {
  blogs: [Blog]
}

type Query {
  blog(url: String!): Blog
}

type Mutation {
  addBlog(input: InputBlog!): Blog
}

type Mutation {
  updateBlog(id: String, input: InputBlog!): Blog
}

type Mutation {
  deleteBlog(id: String): Blog
}

type Mutation {
  addComment(blogUrl: String!, commentDescription: String!): Blog
}

type Mutation {
  updateComment(id: String, input: InputComment!): Comment
}

type Mutation {
  deleteComment(id: String): Comment
}

type Mutation {
  signIn(email: String!, password: String!): AddUserPayload
}

type Query {
  phone(id: ID!): Phone
}

type Interest {
  _id: ID!
  title: String
  addedBy: ID!
  imageUrl:String
}

type InterestsPayload {
  interests: [Interest]
  error: Error
}

type Query {
  interests: InterestsPayload
}

input InputInterests {
  interests: [String]
}

type Mutation {
  updateInterests(interests: [String]): GenericPayload
}

input InputBlog {
  title: String
  description: String
  body: String
  keywords: String
  category: String
  url: String
  adsRequired: Boolean
  createdAt: String
  modifiedAt: String
  images: [String]
}

input InputComment {
  comment: String
  createdAt: String
  modifiedAt: String
  user: InputUser
}

type Status {
  _id: ID!
  name: String
  imageUrl: String
}

input InputStatus {
  name: String
  imageUrl: String
}

type Mutation {
  addStatus(status: InputStatus): GenericPayload
}

type StatusesPayload {
  statuses: [Status]
  error: Error
}

type Query {
  statuses: StatusesPayload
}

input ImagePayload {
  imageUrl: String
  primary: Boolean
}

input InputStepContinue {
  step: Int
  images: [ImagePayload]
  status: String
}

type Mutation {
  completeStep(input: InputStepContinue): GenericPayload
}

type Query {
  seedcountry: GenericPayload
}

type State{
  _id:ID!
  name:String!
  country_id:String!
}

type StatesPayload {
  states: [State]
  error: Error
}

type Query{
  getStatesByCountryCode(countryCode:String!):StatesPayload
}


input InputInterestAdmin{
  title: String
  imageUrl: String
  addedBy: ID
}

input CompleteProfile{
  buildingId: String
}


type Mutation{
  completeProfile(input: CompleteProfile):GenericPayload
}


type Mutation {
  addInterest(input: InputInterestAdmin): GenericPayload
}

input InputCreateEvent {
  name: String
  description: String
  state: String
  country: String
  buildingId: String
  status: String
  interests: [String]
  start_date: Date
  end_date: Date
  photoUrl: String
  photos: [String]
  location: ILocation!
  address: String
}


type Mutation {
  addEvent(input: InputCreateEvent): GenericPayload
}

type CreatedBy{
  _id: ID
  name: String
  photoUrl: String
}

type EventPayload{
    _id:ID!
    name: String
    description: String
    state: State
    country: Country
    buildingId: String
    status: String
    interests: [Interest]
    start_date: Date
    end_date: Date
    photoUrl: String
    photos: [String]
    location: Location
    createdBy:CreatedBy
    available: Boolean
    address: String
}

type EventPayloadGeneric{
   event:EventPayload
   error: Error
}

type EventstPayloadGeneric{
   events:[EventPayload]
   error: Error
}


input Coordinates{
    longitude: Float
    latitude: Float
}

input FilterEvent{
  key:String
  value: Boolean
}

input GetEventsVariables{
    location:Coordinates
    cursor: String
    limit: Int
    after: String
    filters: [FilterEvent]
    sortBy:[String]
    skip: Int
}

type Query{
  getEvent(id:String!):EventPayloadGeneric
  getEvents(input:GetEventsVariables!):EventstPayloadGeneric
}




type UserEventExtraData{
    resource_name:String
    message:String
    meta:String
}

type UserEventPayload{
    from:ID
    resource_id:ID
    extraData:UserEventExtraData
    attachments:[Attachment]
}

enum UserEventTypes {
  MESSAGE
  GROUP_MESSAGE
  KNOCK
}

type UserEvent{
    type:UserEventTypes
    payload:UserEventPayload
}


type Subscription {
  userEvent(userId: ID!): UserEvent
}



enum AttachmentType {
  Image
  Video
}

type Reaction{
  type: String
  user:User
}

type Attachment{
    type:AttachmentType
    path: String
}

type Thread{
  conversation:ID
  sender:User
  unique_id: String
  message: String
  attachments:[Attachment]
  reactions:[Reaction]
  createdAt: Date
  updatedAt: Date
}

type MessagesPayload{
  chats:[Thread]
  conversation_id: ID
}

type Query{
  getChats(userId:String!):MessagesPayload
}

input AttachmentInput{
    type:AttachmentType
    path: String
}

input MessageInputPayload{
  message: String
  attachments:[AttachmentInput]
}

input SendMessagePayload{
  userId:String
  payload:MessageInputPayload
}

type Mutation{
  sendMessage(input:SendMessagePayload):Thread
}